import { SiteLinkStorageUnit } from './site-link-storage-unit';
import { VapiStorageUnit } from './vapi-storage-unit';

export class StorageUnitConverter {
  static toVapiStorageUnit(siteLinkStorageUnit: SiteLinkStorageUnit): VapiStorageUnit {
    return new VapiStorageUnit({
      retCode: siteLinkStorageUnit.Ret_Code,
      unitTypeID: siteLinkStorageUnit.UnitTypeID,
      typeName: siteLinkStorageUnit.sTypeName,
      defLeaseNum: siteLinkStorageUnit.iDefLeaseNum,
      unitID: siteLinkStorageUnit.UnitID,
      unitName: siteLinkStorageUnit.sUnitName,
      width: siteLinkStorageUnit.dcWidth,
      length: siteLinkStorageUnit.dcLength,
      climate: siteLinkStorageUnit.bClimate,
      stdRate: siteLinkStorageUnit.dcStdRate,
      rented: siteLinkStorageUnit.bRented,
      inside: siteLinkStorageUnit.bInside,
      power: siteLinkStorageUnit.bPower,
      alarm: siteLinkStorageUnit.bAlarm,
      floor: siteLinkStorageUnit.iFloor,
      waitingListReserved: siteLinkStorageUnit.bWaitingListReserved,
      corporate: siteLinkStorageUnit.bCorporate,
      rentable: siteLinkStorageUnit.bRentable,
      boardRate: siteLinkStorageUnit.dcBoardRate,
      unitNote: siteLinkStorageUnit.sUnitNote,
      pushRate: siteLinkStorageUnit.dcPushRate,
      tax1Rate: siteLinkStorageUnit.dcTax1Rate,
      tax2Rate: siteLinkStorageUnit.dcTax2Rate,
      unitDesc: siteLinkStorageUnit.sUnitDesc,
      stdWeeklyRate: siteLinkStorageUnit.dcStdWeeklyRate,
      mapTop: siteLinkStorageUnit.dcMapTop,
      mapLeft: siteLinkStorageUnit.dcMapLeft,
      mapTheta: siteLinkStorageUnit.dcMapTheta,
      mapReversWL: siteLinkStorageUnit.bMapReversWL,
      entryLoc: siteLinkStorageUnit.iEntryLoc,
      doorType: siteLinkStorageUnit.iDoorType,
      ada: siteLinkStorageUnit.iADA,
      stdSecDep: siteLinkStorageUnit.dcStdSecDep,
      mobile: siteLinkStorageUnit.bMobile,
      siteID: siteLinkStorageUnit.SiteID,
      locationCode: siteLinkStorageUnit.sLocationCode,
      pushRateNotRounded: siteLinkStorageUnit.dcPushRate_NotRounded,
      rmRoundTo: siteLinkStorageUnit.dcRM_RoundTo,
      serviceRequired: siteLinkStorageUnit.bServiceRequired,
      daysVacant: siteLinkStorageUnit.iDaysVacant,
      excludeFromWebsite: siteLinkStorageUnit.bExcludeFromWebsite,
      defaultCoverageID: siteLinkStorageUnit.DefaultCoverageID,
      webRate: siteLinkStorageUnit.dcWebRate,
      preferredRate: siteLinkStorageUnit.dcPreferredRate,
      preferredChannelType: siteLinkStorageUnit.iPreferredChannelType,
      preferredIsPushRate: siteLinkStorageUnit.bPreferredIsPushRate
    });
  }

  static toSiteLinkStorageUnit(vapiStorageUnit: VapiStorageUnit): SiteLinkStorageUnit {
    return new SiteLinkStorageUnit({
      Ret_Code: vapiStorageUnit.retCode,
      UnitTypeID: vapiStorageUnit.unitTypeID,
      sTypeName: vapiStorageUnit.typeName,
      iDefLeaseNum: vapiStorageUnit.defLeaseNum,
      UnitID: vapiStorageUnit.unitID,
      sUnitName: vapiStorageUnit.unitName,
      dcWidth: vapiStorageUnit.width,
      dcLength: vapiStorageUnit.length,
      bClimate: vapiStorageUnit.climate,
      dcStdRate: vapiStorageUnit.stdRate,
      bRented: vapiStorageUnit.rented,
      bInside: vapiStorageUnit.inside,
      bPower: vapiStorageUnit.power,
      bAlarm: vapiStorageUnit.alarm,
      iFloor: vapiStorageUnit.floor,
      bWaitingListReserved: vapiStorageUnit.waitingListReserved,
      bCorporate: vapiStorageUnit.corporate,
      bRentable: vapiStorageUnit.rentable,
      dcBoardRate: vapiStorageUnit.boardRate,
      sUnitNote: vapiStorageUnit.unitNote,
      dcPushRate: vapiStorageUnit.pushRate,
      dcTax1Rate: vapiStorageUnit.tax1Rate,
      dcTax2Rate: vapiStorageUnit.tax2Rate,
      sUnitDesc: vapiStorageUnit.unitDesc,
      dcStdWeeklyRate: vapiStorageUnit.stdWeeklyRate,
      dcMapTop: vapiStorageUnit.mapTop,
      dcMapLeft: vapiStorageUnit.mapLeft,
      dcMapTheta: vapiStorageUnit.mapTheta,
      bMapReversWL: vapiStorageUnit.mapReversWL,
      iEntryLoc: vapiStorageUnit.entryLoc,
      iDoorType: vapiStorageUnit.doorType,
      iADA: vapiStorageUnit.ada,
      dcStdSecDep: vapiStorageUnit.stdSecDep,
      bMobile: vapiStorageUnit.mobile,
      SiteID: vapiStorageUnit.siteID,
      sLocationCode: vapiStorageUnit.locationCode,
      dcPushRate_NotRounded: vapiStorageUnit.pushRateNotRounded,
      dcRM_RoundTo: vapiStorageUnit.rmRoundTo,
      bServiceRequired: vapiStorageUnit.serviceRequired,
      iDaysVacant: vapiStorageUnit.daysVacant,
      bExcludeFromWebsite: vapiStorageUnit.excludeFromWebsite,
      DefaultCoverageID: vapiStorageUnit.defaultCoverageID,
      dcWebRate: vapiStorageUnit.webRate,
      dcPreferredRate: vapiStorageUnit.preferredRate,
      iPreferredChannelType: vapiStorageUnit.preferredChannelType,
      bPreferredIsPushRate: vapiStorageUnit.preferredIsPushRate
    });
  }
}